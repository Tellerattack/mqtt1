package com.example.lgw.mqtt1.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lgw.mqtt1.bean.BrandTypes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BRAND_TYPES".
*/
public class BrandTypesDao extends AbstractDao<BrandTypes, Void> {

    public static final String TABLENAME = "BRAND_TYPES";

    /**
     * Properties of entity BrandTypes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ImgId = new Property(0, int.class, "ImgId", false, "IMG_ID");
        public final static Property Tv_brand = new Property(1, String.class, "Tv_brand", false, "TV_BRAND");
        public final static Property Tv_brand_types = new Property(2, String.class, "Tv_brand_types", false, "TV_BRAND_TYPES");
    }


    public BrandTypesDao(DaoConfig config) {
        super(config);
    }
    
    public BrandTypesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BRAND_TYPES\" (" + //
                "\"IMG_ID\" INTEGER NOT NULL ," + // 0: ImgId
                "\"TV_BRAND\" TEXT," + // 1: Tv_brand
                "\"TV_BRAND_TYPES\" TEXT);"); // 2: Tv_brand_types
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BRAND_TYPES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BrandTypes entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getImgId());
 
        String Tv_brand = entity.getTv_brand();
        if (Tv_brand != null) {
            stmt.bindString(2, Tv_brand);
        }
 
        String Tv_brand_types = entity.getTv_brand_types();
        if (Tv_brand_types != null) {
            stmt.bindString(3, Tv_brand_types);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BrandTypes entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getImgId());
 
        String Tv_brand = entity.getTv_brand();
        if (Tv_brand != null) {
            stmt.bindString(2, Tv_brand);
        }
 
        String Tv_brand_types = entity.getTv_brand_types();
        if (Tv_brand_types != null) {
            stmt.bindString(3, Tv_brand_types);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BrandTypes readEntity(Cursor cursor, int offset) {
        BrandTypes entity = new BrandTypes( //
            cursor.getInt(offset + 0), // ImgId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Tv_brand
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // Tv_brand_types
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BrandTypes entity, int offset) {
        entity.setImgId(cursor.getInt(offset + 0));
        entity.setTv_brand(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTv_brand_types(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BrandTypes entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BrandTypes entity) {
        return null;
    }

    @Override
    public boolean hasKey(BrandTypes entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
